(Define-Ontology
     New-Meta
     (Frame-Ontology)
   "Not supplied yet."
   :Io-Package
   "ONTOLINGUA-USER")


(In-Ontology (Quote New-Meta))



;;; Bean-Product-Agent 

(Define-Frame Bean-Product-Agent :Own-Slots ((Documentation "Not supplied yet.")(Instance-Of Agent)) :Axioms ((Agent-Needed Bean-Product-Agent Pick-Up-Bean)))


;;; Dairy-Product-Agent

(Define-Frame Dairy-Product-Agent :Own-Slots ((Documentation "Not supplied yet.") (Instance-Of Agent)) :Axioms ((Agent-Needed Dairy-Product-Agent Pick-Up-Dairy)))


;;; Add-To-Bag-Agent

(Define-Frame Add-To-Bag-Agent :Own-Slots ((Documentation "Not supplied yet.") (Instance-Of Agent)) :Axioms ((Agent-Needed Add-To-Bag-Agent Add-To-Bag)))


;;; Pay-For-Agent

(Define-Frame Pay-For-Agent :Own-Slots ((Documentation "Not supplied yet.") (Instance-Of Agent)) :Axioms ((Agent-Needed Pay-For-Agent Pay-For)))


;;; On-Sale

(Define-Class On-Sale (?X) "Not supplied yet." :Def (And (Predicate ?X)))


;;; Picked-Up

(Define-Class Picked-Up (?X) "Not supplied yet." :Def (And (Predicate ?X)))


;;; Paid-For

(Define-Class Paid-For (?X) "Not supplied yet." :Def (And (Predicate ?X)))


;;; Picking-Agency

(Define-Class Picking-Agency (?X) "Not supplied yet." :Def (And (Predicate ?X)))


;;; Buy

(Define-Class Buy (Predicate) "Not supplied yet." :Def (And (Predicate ?X)))


;;; Cost

(Define-Class Cost (Predicate) "Not supplied yet." :Def (And (Predicate ?X)))


;;; Has

(Define-Class Has (?X) "Not supplied yet." :Def (And (Predicate ?X)))


;;; Pick-Up-Dairy

(Define-Individual Pick-Up-Dairy (Action) "Not supplied yet.")


;;; Pick-Up-Bean

(Define-Individual Pick-Up-Bean (Action) "Not supplied yet.")


;;; Buy

(Define-Individual Buy (Action) "Not supplied yet.")


;;; Pay-For

(Define-Individual Pay-For (Action) "Not supplied yet.")


;;; Add-To-Bag

(Define-Individual Add-To-Bag (Action) "Not supplied yet.")


;;; Wait-Fact

(Define-Class Wait-Fact (?X) "Not supplied yet." :Def (And (Predicate ?X)))


;;; Predicate

(Define-Class Predicate (?X) "Not supplied yet." :Def (And (Thing ?X)))


;;; Agent-Needed

(Define-Function Agent-Needed (?Agent-0) :-> ?Value "Not supplied yet." :Def (And (Agent ?Agent-0) (Action ?Value)))


;;; Action

(Define-Class Action (?X) "Not supplied yet." :Def (And (Thing ?X)))


;;; Inform

(Define-Class Inform (?X) "Not supplied yet." :Def (And (Predicate ?X)))


;;; Agent

(Define-Class Agent (?X) "Not supplied yet." :Def (And (Thing ?X)))


;;; Ask-Fact

(Define-Class Ask-Fact (?X) "Not supplied yet." :Def (And (Predicate ?X)))